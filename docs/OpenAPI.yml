openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AnorZaken7/LoneStarLudo/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AnorZaken7/LudoMoves/1.0.0
info:
  description: API for the Ludo Lone Star game server.
  version: "1.0.0"
  title: Ludo Lone Star API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available to all users.
  - name: players
    description: Operations available to players of a game.

paths:
  /ludo:
    get:
      tags:
        - users
      summary: Server state / info.
      description: TODO
      operationId: ludoServerInfo
      responses:
        '204':
          description: Server is alive! #TODO
        '418':
          description: Coffe? U no can has!
  
  /ludo/lobbies:
    get:
      tags:
        - users
      summary: Lists Ludo lobbies.
      description: TODO
      operationId: ludoListLobbies
      parameters:
        - name: show
          in: query
          description: |
            Filters lobbies based on how full they are:
            open: Show open only.
            full: Show full only.
            all: Show both open and full.
            penultimate: Show only lobbies with exactly one slot remaining.
          schema:
            type: string
            default: open
            enum: [open, full, all, penultimate]
        - name: playerIds
          in: query
          description: |
            Filter to lobbies where at least one of the specified playerIds is present. (Could for example be your friends list.)
          schema:
            type: array
            items:
              type: string
        - name: showPlayerIds
          in: query
          description: Include playerIds for each lobby.
          schema:
            type: boolean
          allowEmptyValue: true
      responses:
        '200':
          description: A JSON array of Lobby objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LobbyListEntry'
        '400':
          description: bad input parameter
    post:
      tags:
        - users
      summary: Creates a new lobby.
      description: Creates a new lobby and joins it as player 0.
      operationId: ludoCreateLobby
      parameters: 
        - name: LudoUser
          in: header
          description: Id of the user creating the lobby.
          schema:
            type: string
          required: true
      responses:
        '201': # Created
          description: |
            OK. Here's the id of the new game.
            The creator of a lobby is always assigned playerId 0.
          content:
            text/plain:
              schema:
                type: string
  
  /ludo/lobby/{gameId}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
    get:
      tags: 
        - users
      summary: Game lobby information.
      description: Which players are in the game, can the game still be joined, etc.
      operationId: ludoLobbyInfo
      responses:
        '200':
          description: A LobbyInfo object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyInfo'
        '404':
          description: No such game exists.
    patch:
      tags:
        - users
      summary: Join a game lobby.
      description: TODO
      operationId: ludoLobbyJoin
      parameters: 
        - name: Joining-User
          in: header
          description: Id of the user who wants to join.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Game joined. Here's your playerId for this game.
          content:
            text/plain:
              schema:
                type: integer
                format: int32
                minimum: 0
                maximum: 3
          #TODO: return game auth token
        '404':
          description: No such game exists.
        '409': # "This response is sent when a request conflicts with the current state of the server."
          description: Can not join the game (reason returned).
            full - The lobby is full.
            late - The game is already in progress, you are late to the party.
            dupe - User is already part of that game.
            nope - Other unspecified reason.
          content:
            text/plain:
              schema:
                type: string
                enum: [full, late, dupe, nope]
    put:
      tags: 
        - players
      summary: Start game.
      description: |
        Starts the game (no longer in lobby state).
        Requires at least two players.
        Requires that all players are ready.
      operationId: ludoGameStart
      responses:
        '204':
          description: OK
        '404':
          description: No such game exists.
        '409':
          description: Not enough players, or not all players ready.
      #TODO: require game auth token + 401 & 403 response
                
  /ludo/lobby/{gameId}/{playerId}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/playerIdPath'
    get:
      tags:
        - users
      summary: Player ready state.
      description: Ready state for that player in that game.
      operationId: ludoLobbyGetReady
      responses:
        '200':
          description: Ready state.
          content:
            text/plain:
              schema:
                type: boolean
        '400':
          description: Bad playerId.
        '404':
          description: No such game exists.
        '409':
          description: Game already in progress.
    put:
      tags: 
        - players
      summary: Set player's ready status.
      description: All players in a lobby need to ready up before a game can start.
      operationId: ludoLobbySetReady
      parameters:
        - name: ready
          in: query
          required: true
          description: Sets the players ready flag.
          schema:
            type: boolean
      responses:
        '204':
          description: OK
        '400':
          description: Bad playerId.
        '404':
          description: No such game exists.
        '409':
          description: Game already in progress.
      #TODO: require game auth token + 401 & 403 response
    delete:
      tags:
        - players
      summary: Leave lobby / concede.
      description: When the last player leaves, the lobby itself is deleted.
      operationId: ludoLobbyLeave
      responses:
        '204':
          description: OK
        '400':
          description: Bad playerId.
        '404':
          description: No such game exists.
        '409':
          description: Player has already left / conceded.
      #TODO: require game auth token + 401 & 403 response
  
  /ludo/games:
    get:
      tags:
        - users
      summary: Returns a list of games.
      description: Only returns running games by default.
      parameters:
        - name: show
          in: query
          description: TODO
          schema:
            type: string
            enum: [running, completed, all]
            default: running
        - name: id
          in: query
          description: Search for a specific game (implies show=all).
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of GameInfo objects.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/GameInfo'
        '400':
          description: bad input parameter
        '404':
          description: No such game exists. (When using the id parameter.)
  
  /ludo/game/{gameId}:
    parameters: 
      - $ref: '#/components/parameters/gameIdPath'
    get:
      tags:
        - users
      summary: Current player and die roll.
      description: |
        The state of a game (CurrentPlayer, CurrentDieRoll).
        Combine this with board state and lobby data to have a complete save.
      operationId: ludoGetCurrent
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/PlayerDie'
        '404':
          description: No such game exists.
        '409':
          description: Game has either not started or has already ended.
    put:
      tags:
        - players
      summary: Set current player and die roll.
      description: Setting current player and die roll can only be done while still in lobby.
      operationId: ludoSetPlayerDie
      parameters:
        - name: player
          in: query
          required: true
          description: Current player
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 3
        - name: roll
          in: query
          required: true
          description: Current die roll
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 6
      responses:
        '204':
          description: OK
        '400':
          description: Bad input parameter.
        '404':
          description: No such game exists.
        '409':
          description: Game has already started (perhaps even ended).
      #TODO: require game auth token + 401 & 403 response
  
  /ludo/board:
    get:
      tags:
        - users
      summary: Get a BoardInfo object.
      description: Extrapolates board information from boardLength.
      operationId: ludoGetBoardInfo
      parameters:
        - name: length
          in: query
          description: Length of the shared competative track around the board.
          schema:
            type: integer
            format: int32
            minimum: 24
            maximum: 80
            default: 40
      responses:
        '200':
          description: A BoardInfo object.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/BoardInfo'
        '400':
          description: Bad length parameter.
  
  /ludo/board/{gameId}:
    parameters: 
      - $ref: '#/components/parameters/gameIdPath'
    get:
      tags:
        - users
      summary: Current board state.
      description: TODO # <----------------------------------
      operationId: ludoGetBoardState
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/BoardState'
        '404':
          description: No such game exists.
        '409':
          description: Game has either not started or has already ended.
    put:
      tags:
        - players
      summary: Set the BoardState.
      description: Setting the BoardState can only be done while still in lobby.
      operationId: ludoSetBoardState
      parameters:
        - name: distances
          in: query
          required: true
          description: |
            The state of the board in the form of an array of player relative board indexes ("distances"), starting with all pieces (0-3) for player 0, then all pieces for player 1, etc.
            (Length of the array is thus PlayerCount * PieceCount.)
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 0
              maximum: 90 # based on maximum boardLength
      responses:
        '204':
          description: OK
        '400':
          description: Bad distances parameter.
        '404':
          description: No such game exists.
        '409':
          description: Game has already started (perhaps even ended).
      #TODO: require game auth token + 401 & 403 response
  
  /ludo/game/{gameId}/{playerId}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/playerIdPath'
    # get: decision making info
    # post: PassTurn!
    # delete: concede.
    get:
      tags:
        - users
      summary: Turn info for the current player.
      description: >
        TurnInfo object for turn decision making.
        Contains an array of PieceInfo objects.
      operationId: ludoGetTurnInfo
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/TurnInfo'
        '400':
          description: bad input parameter
        '404':
          description: No such game exists.
    post:
      tags:
        - players
      summary: Ends the turn without moving.
      description: |
        Passes the turn over to the next player, unless the player has a bonus turn ("IsLucky") in which case it begins their bonus turn.
        Passing is by default only allowed if no move is possible.
      operationId: ludoPassTurn
      responses:
        '204':
          description: OK
        '400':
          description: Bad playerId.
        '404':
          description: No such game exists.
        '409':
          description: |
            Not the active player, or not allowed to pass the turn.
            (Could be because the game has ended.)
      #TODO: require game auth token + 401 & 403 response
    delete:
      tags:
        - players
      summary: Concedes the game.
      description: |
        Irrevocably hands over control of your pieces to a bot.
        If only one human player remains after a concede, that player is declared the winner and the game ends.
      operationId: ludoConcede
      responses:
        '204':
          description: OK
        '400':
          description: Bad playerId.
        '404':
          description: No such game exists.
        '409':
          description: This player has already conceded and / or the game has ended.
      #TODO: require game auth token + 401 & 403 response
    
  /ludo/game/{gameId}/{playerId}/{pieceId}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/playerIdPath'
      - $ref: '#/components/parameters/pieceIdPath'
    # get: PieceInfo!
    # post: MovePiece! <---- put or patch or post?
    get:
      tags:
        - users
      summary: Returns a PieceInfo object.
      description: |
        A PieceInfo object describing state, movability, and collision / blocking for the piece.
        Requires that playerId is the current player.
      operationId: ludoGetPiece
      responses:
        '200':
          description: A PieceInfo object.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/PieceInfo'
        '400':
          description: Bad player or piece id.
        '404':
          description: No such game exists.
        '409':
          description: |
            PieceInfo can only be acquired / calculated for the active player.
            (Could be because the game has ended.)
    post:
      tags: 
        - players
      summary: Moves the piece.
      description: |
        Moves the piece according to the current die roll.
        Requires that playerId is the current player and that pieceId is a movable piece.
      operationId: ludoMovePiece
      responses:
        '204':
          description: OK
        '400':
          description: Bad player or piece id.
        '404':
          description: No such game exists.
        '409':
          description: |
            Not the active player, or not a movable piece.
            (Could be because the game has ended.)
      #TODO: require game auth token + 401 & 403 response
  
  # This path is not required to play, it just allows anyone to query moves for an arbitrary gamestate.
  /ludo/calculate:
    get:
      tags:
        - users
      summary: Calculates possible moves for a player at a given gamestate.
      description: >
        By passing in a gamestate, you can get a description of how a players pieces can move on the board - as a PieceInfo array.
      operationId: ludoCalculateMoves
      parameters:
        - name: player
          in: query
          required: true
          description: The player to calculate moves for.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 3
        - name: roll
          in: query
          required: true
          description: The die roll to calculate moves for.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 6
        - name: distances
          in: query
          required: true
          description: |
            The state of the board in the form of an array of player relative board indexes ("distances"), starting with all pieces (0-3) for player 0, then all pieces for player 1, etc.
            (Length of the array is thus PlayerCount * PieceCount.)
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 0
              maximum: 90
      responses:
        '200':
          description: |
            Array of PieceInfo objects describing distance etc. for all of the current players pieces (0-3).
            All of the current players possible moves (or lack there of) can be inferred from this array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PieceInfo'
        '400':
          description: bad input parameter

components:
  parameters: 
    gameIdPath:
      name: gameId
      in: path
      required: true
      description: Id of a game.
      schema:
        type: string
    playerIdPath:
      name: playerId
      in: path
      required: true
      description: Game specific playerId.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 3
    pieceIdPath:
      name: pieceId
      in: path
      required: true
      description: Player specific pieceId.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 3
  schemas:
    LobbyListEntry:
      type: object
      properties:
        gameId:
          type: string
        #TODO: add more properties... <-------------------------
    LobbyInfo:
      type: object
      properties:
        #TODO: add more properties... <-------------------------
        players:
          type: array
          items:
            type: string
    GameInfo:
      type: object
      properties:
        gameId:
          type: string
        #TODO: add more properties... <-------------------------
    StartEndPos:  # min-max values derive from min-max of boardLength.
      type: object
      properties:
        startPos:
          type: integer
          description: |
            Absolute board position for where a player places their piece when they take it out of their base.
          format: int32
          minimum: 0
          maximum: 60
        endZonePos:
          type: integer
          description: |
            Absolute board position that corresponds to the first end-zone position of a player.
            Any position larger than or equal to this position corresponds to an endzone position.
          format: int32
          minimum: 24
          maximum: 110
    BoardInfo:  # default values are for a standard sized Ludo board.
      type: object
      properties:
        boardLength:
          type: integer
          description: |
            Length of the competative shared track around the board (does not include the safe end-zones leading to the goal).
            Must be a multiple of 8.
          format: int32
          minimum: 24
          maximum: 80
          default: 40
        endZoneLength:
          type: integer
          description: |
            Length of the collision-free end-zones leading to the goal (goal square included). This is usually just boardLength / 8.
            The goal distance - the player relative position / distance a piece must move to reach the goal - is simply boardLength + endZoneLength.
            Thus a piece is in its (safe) end-zone if its distance is greater than boardLength, but smaller than the goal distance.
          format: int32
          minimum: 3
          maximum: 10
          default: 5
        startEndPositions:
          type: array
          description: |
            The absolute start positions, paired with the absolute position of the first square of the endzone, for each player.
          items:
            $ref: '#/components/schemas/StartEndPos'
        #TODO add starting positions etc.  <---------------
    BoardState:
      type: array
      description: An array of piece distance arrays (one for each player).
      items:
        type: array
        description: |
          An array of piece distances (one for each piece).
          These player relative board positions describe how far a piece has moved. To translate it into an absolute board position, the length of the board and the index of the player must also be known.
          Assuming the distance is less than the board length (i.e. if the piece is still on the shared competative track) the formula looks like so;
          position = (distance + playerId * boardLength / 4) % boardLength
        items:
          type: integer
          format: int32
          minimum: 0
    PlayerDie:
      type: object
      properties:
        player:
          type: integer
          description: Id of current player.
          format: int32
          minimum: 0
          maximum: 3
        die:
          type: integer
          description: Die roll for the current player / turn.
          format: int32
          minimum: 1
          maximum: 6
    GameState:
      type: object
      properties:
        current:
          $ref: '#/components/schemas/PlayerDie'
        distances:
          $ref: '#/components/schemas/BoardState'
        #TODO add missing data to make this a complete game save
    TurnInfo:
      type: object
      required:
        - pieces
      properties:
        canPass:
          type: boolean
          description: >
            Can the player pass the current turn?
            (Can be omitted if false.)
        isLucky:
          type: boolean
          description: >
            Will the player get a bonus turn after the current one?
            (Can be omitted if false.)
        pieces:
          type: array
          description: A JSON array of PieceInfo objects.
          items:
            $ref: '#/components/schemas/PieceInfo'
    PieceInfo:
      type: object
      required:
        - distance
      properties:
        distance:
          type: integer
          format: int32
          minimum: 0
          description: |
            How far this piece has moved (player-relative board index).
            Zero if it is currently in the players base.
        position:
          type: integer
          format: int32
          minimum: 0
          description: |
            Where this piece is on the board (absolute board index).
            Omitted if the piece isn't on the board, i.e. if it has reached the goal or is in the players base.
            (Distance is non-zero and position is omitted == piece has reached the goal.)
        moved:
          type: integer
          format: int32
          minimum: -1 # if the move puts it at the goal
          description: |
            Where this piece will be on the board if it is moved.
            Omitted if the piece cannot move.
        collision:
          $ref: '#/components/schemas/PlayerPiece'
    PlayerPiece:
          type: object
          required:
            - player
            - piece
          description: |
            A player and piece tuple for describing the content of a target square on the board.
            For example used to describe what a piece would collide with if it were to be moved. (Does not imply that the move in question is legal!)
            Omitted if the target square is empty / there is no collision.
          properties:
            player:
              type: integer
              format: int32
              minimum: 0
              maximum: 3
              description: Zero-based player index.
            piece:
              type: integer
              format: int32
              minimum: 0
              maximum: 3
              description: Zero-based piece index.
